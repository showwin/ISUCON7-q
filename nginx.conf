# nginx のワーカは2本(フロントサーバは増やしてもいいかも？)
worker_processes 2;
worker_rlimit_nofile 12288;

events {
  worker_connections 4096;
  accept_mutex_delay 100ms;
}

http {
    # お作法
    log_format with_time '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" $request_time';
    access_log /tmp/access.log with_time;
    # 本気のときは止める
    #access_log off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_tokens    off;

    sendfile on;
    open_file_cache max=100 inactive=20s;
    tcp_nopush on;

    keepalive_timeout  65;

    proxy_buffers 100 32k;
    proxy_buffer_size 8k;

    gzip on;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_types text/css
                text/javascript
                application/javascript;
    gzip_static on;

    # 各サーバでuwsgiの前に立っているHTTPサーバ
    # ここらへんの設定はサーバ1以外では使われないがあえて削る理由もないので
    # ここのホスト名は書き換え必須！
    upstream appweb {
        server app1461:8081 max_fails=0 weight=1;
        server app1462:8081 max_fails=0 weight=1;
        keepalive 60;
    }

    upstream web2 {
        server app1462:8082 max_fails=0 weight=1;
        keepalive 60;
    }


    # 最初にリクエストを受け付ける
    # 恐らくサーバ1でのみアクセスされる
    server {
        listen 80;
        # フロントWEBサーバで何かしたいとき用
        #location = / {
        #    add_header Content-type text/html;
        #    default_type text/html;
        #    root /tmp/test/;
        #    # /?error=1なら /tmp/test/error1.htmlを戻す
        #    if ( $arg_error = "1" ) {
        #        rewrite ^(.*)$ /error1.html break;
        #    }
        #    #/?error=2なら /tmp/test/error2.htmlを戻す
        #    if ( $arg_error = "2" ) {
        #        rewrite ^(.*)$ /error2.html break;
        #    }
        #    # / だけのアクセスは /tmp/index1.htmlを戻す
        #    rewrite ^(.*)$ /index1.html break;
        #
        #}

        client_max_body_size 20M;
        root /home/isucon/isubata/webapp/public;
        location /favicon.ico {
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;
        }
        location /fonts/ {
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;
        }
        location /js/ {
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;
        }
        location /css/ {
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;
        }
        location /register {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            if ($request_method = POST ) {
                # 各サーバのuwsgiの前段のnginxに飛ばす
                proxy_pass http://appweb;
            }
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;
            add_header 'Content-Type' 'text/html; charset=utf-8';
        }

        location /icons/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            # 各サーバのuwsgiの前段のnginxに飛ばす
            proxy_pass http://web2;
        }




        location /profile/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            if ($request_method = POST ) {
                # 各サーバのuwsgiの前段のnginxに飛ばす
                proxy_pass http://web2;
            }
            if ($request_method = GET ) {
                # 各サーバのuwsgiの前段のnginxに飛ばす
                proxy_pass http://appweb;
            }
        }



        # ロードバランス
        location / {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            # 各サーバのuwsgiの前段のnginxに飛ばす
            proxy_pass http://appweb;
        }


    }



    # uwsgi前段のnginx用設定
    server {
        listen 8082;
        access_log off;
        root /home/isucon/isubata/webapp/public;
        location /icons/ {
            access_log off;
            add_header Cache-Control must-revalidate; # Indicate that the resource must be revalidated at each access
            etag on;

        }
        location / {
            proxy_set_header Host $host;

            # uwsgiに飛ばす
            include uwsgi_params;
            uwsgi_pass unix://tmp/uwsgi.sock;
        }

    }

    # uwsgi前段のnginx用設定
    server {
        listen 8081;
        access_log off;

        location / {
            proxy_set_header Host $host;

            # uwsgiに飛ばす
            include uwsgi_params;
            uwsgi_pass unix://tmp/uwsgi.sock;
        }
    }
}
